{"version":3,"sources":["helpers/authUtils.js","redux/auth/actions.js","constants/actionTypes.js","redux/pageTitle.js","routes.js","App.js","helpers/fake-backend.js","serviceWorker.js","redux/auth/reducers.js","redux/strings/stringsReducer.js","redux/reducers.js","redux/auth/saga.js","redux/sagas.js","redux/store.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","isUserAuthenticated","getLoggedInUser","jwt_decode__WEBPACK_IMPORTED_MODULE_0__","jwt_decode__WEBPACK_IMPORTED_MODULE_0___default","n","react_cookie__WEBPACK_IMPORTED_MODULE_1__","user","decoded","jwtDecode","token","currentTime","Date","now","exp","console","warn","Cookies","get","JSON","parse","loginUser","loginUserSuccess","loginUserFailed","registerUser","registerUserSuccess","registerUserFailed","logoutUser","forgetPasswordSuccess","forgetPasswordFailed","_constants_actionTypes__WEBPACK_IMPORTED_MODULE_0__","username","password","type","LOGIN_USER","payload","LOGIN_USER_SUCCESS","error","LOGIN_USER_FAILED","fullname","email","REGISTER_USER","REGISTER_USER_SUCCESS","REGISTER_USER_FAILED","history","LOGOUT_USER","passwordResetStatus","FORGET_PASSWORD_SUCCESS","FORGET_PASSWORD_FAILED","FORGET_PASSWORD","ADD_STRING","ADD_STRING_SUCCESS","ADD_STRING_FAILED","UPDATE_STRING","UPDATE_STRING_SUCCESS","UPDATE_STRING_FAILED","DELETE_STRING","DELETE_STRING_SUCCESS","DELETE_STRING_FAILED","CHANGE_TITLE","changeTitle","title","Title","state","arguments","length","undefined","action","Dashboard","React","lazy","e","then","bind","Login","Promise","all","Logout","ForgetPassword","Register","ConfirmAccount","AuthLayout","StringsPage","CreateStringPage","PrivateRoute","_ref","Component","component","roles","rest","Object","D_IT_Git_test_repo_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","assign","render","props","to","pathname","loggedInUser","indexOf","role","from","location","routes","path","name","route","Route","exact","mainPageRoutes","loading","react_default","NonAuthLayout","Loadable","loader","loaded","default","users","id","firstName","lastName","realFetch","window","fetch","url","opts","resolve","reject","setTimeout","endsWith","method","params","body","filteredUsers","filter","responseJson","ok","json","_params$fullname$spli","split","newUser","push","message","headers","Authorization","response","configureFakeBackend","withLayout","WrappedComponent","HOC","_Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","value","connect","App","getLayout","_this2","react_router_dom","Fragment","map","index","Layout","react","fallback","isAuthenticated","Auth","Boolean","hostname","match","INIT_STATE","objectSpread","existStrings","identifier","string","hasTranslate","stringsReducer","combineReducers","strings","login","logout","register","forgetPassword","watchLoginUser","watchLogoutUser","watchRegisterUser","watchForgetPassword","authSaga","fetchJSON","options","status","catch","setSession","cookies","set","stringify","remove","_ref$payload","regenerator_default","wrap","_context","prev","next","Content-Type","call","sent","put","t0","t1","abrupt","stop","_marked","_ref2","_context2","_marked2","_ref3","_ref3$payload","_context3","_marked3","_ref4","_context4","_marked4","_context5","takeEvery","_marked5","_context6","_marked6","_context7","_marked7","_context8","_marked8","_context9","fork","_marked9","rootSaga","getState","sagas_marked","sagaMiddleware","createSagaMiddleware","middlewares","ReactDOM","es","store","initialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducers","applyMiddleware","run","sagas","configureStore","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.820311f5.chunk.js","sourcesContent":["import jwtDecode from 'jwt-decode';\nimport { Cookies } from \"react-cookie\";\n\n/**\n * Checks if user is authenticated\n */\nconst isUserAuthenticated = () => {\n    const user = getLoggedInUser();\n    if (!user) {\n        return false;\n    }\n    const decoded = jwtDecode(user.token);\n    const currentTime = Date.now() / 1000;\n    if (decoded.exp < currentTime) {\n        console.warn('access token expired');\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n\n/**\n * Returns the logged in user\n */\nconst getLoggedInUser = () => {\n    const cookies = new Cookies(); \n    const user = cookies.get(\"user\");\n    return user ? (typeof(user) == 'object'? user: JSON.parse(user)) : null;\n}\n\nexport { isUserAuthenticated, getLoggedInUser };","// @flow\nimport {\n    LOGIN_USER,\n    LOGIN_USER_SUCCESS,\n    LOGIN_USER_FAILED,\n    LOGOUT_USER,\n    REGISTER_USER,\n    REGISTER_USER_SUCCESS,\n    REGISTER_USER_FAILED,\n    FORGET_PASSWORD,\n    FORGET_PASSWORD_SUCCESS,\n    FORGET_PASSWORD_FAILED\n} from '../../constants/actionTypes';\n\ntype AuthAction = { type: string, payload: {} | string };\n\nexport const loginUser = (username: string, password: string): AuthAction => ({\n    type: LOGIN_USER,\n    payload: { username, password }\n});\n\nexport const loginUserSuccess = (user: string): AuthAction => ({\n    type: LOGIN_USER_SUCCESS,\n    payload: user\n});\n\nexport const loginUserFailed = (error: string): AuthAction => ({\n    type: LOGIN_USER_FAILED,\n    payload: error\n});\n\nexport const registerUser = (fullname: string, email: string, password: string): AuthAction => ({\n    type: REGISTER_USER,\n    payload: { fullname, email, password }\n});\n\nexport const registerUserSuccess = (user: {}): AuthAction => ({\n    type: REGISTER_USER_SUCCESS,\n    payload: user\n});\n\nexport const registerUserFailed = (error: string): AuthAction => ({\n    type: REGISTER_USER_FAILED,\n    payload: error\n});\n\nexport const logoutUser = (history: any): AuthAction => ({\n    type: LOGOUT_USER,\n    payload: { history }\n});\n\nexport const forgetPassword = (username: string): AuthAction => ({\n    type: FORGET_PASSWORD,\n    payload: { username }\n});\n\nexport const forgetPasswordSuccess = (passwordResetStatus: string): AuthAction => ({\n    type: FORGET_PASSWORD_SUCCESS,\n    payload: passwordResetStatus\n});\n\nexport const forgetPasswordFailed = (error: string): AuthAction => ({\n    type: FORGET_PASSWORD_FAILED,\n    payload: error\n});","/* AUTH */\nexport const LOGIN_USER = \"LOGIN_USER\";\nexport const LOGIN_USER_SUCCESS = \"LOGIN_USER_SUCCESS\";\nexport const LOGIN_USER_FAILED = \"LOGIN_USER_FAILED\";\nexport const REGISTER_USER = \"REGISTER_USER\";\nexport const REGISTER_USER_SUCCESS = \"REGISTER_USER_SUCCESS\";\nexport const REGISTER_USER_FAILED = \"REGISTER_USER_FAILED\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\nexport const FORGET_PASSWORD = \"FORGET_PASSWORD\";\nexport const FORGET_PASSWORD_SUCCESS = \"FORGET_PASSWORD_SUCCESS\";\nexport const FORGET_PASSWORD_FAILED = \"FORGET_PASSWORD_FAILED\";\n\n/* STRINGS */\n\nexport const ADD_STRING = \"ADD_STRING\";\nexport const ADD_STRING_SUCCESS = \"ADD_STRING_SUCCESS\";\nexport const ADD_STRING_FAILED = \"ADD_STRING_FAILED\";\nexport const UPDATE_STRING = \"UPDATE_STRING\";\nexport const UPDATE_STRING_SUCCESS = \"UPDATE_STRING_SUCCESS\";\nexport const UPDATE_STRING_FAILED = \"UPDATE_STRING_FAILED\";\nexport const DELETE_STRING = \"DELETE_STRING\";\nexport const DELETE_STRING_SUCCESS = \"DELETE_STRING_SUCCESS\";\nexport const DELETE_STRING_FAILED = \"DELETE_STRING_FAILED\";\n\n/* PAGE_TITLE */\n\nexport const CHANGE_TITLE = \"CHANGE_TITLE\";\n","import { CHANGE_TITLE } from \"../constants/actionTypes\";\r\n\r\nexport const changeTitle = (title) => ({\r\n  type: CHANGE_TITLE,\r\n  payload: title,\r\n});\r\n\r\nconst Title = (state = \"\", action) => {\r\n  switch (action.type) {\r\n    case CHANGE_TITLE:\r\n      return (state = action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Route } from \"react-router-dom\";\n\nimport { isUserAuthenticated, getLoggedInUser } from \"./helpers/authUtils\";\n\n// lazy load all the views\nconst Dashboard = React.lazy(() => import(\"./pages/Dashboard\"));\n\n// auth\nconst Login = React.lazy(() => import(\"./pages/auth/Login\"));\nconst Logout = React.lazy(() => import(\"./pages/auth/Logout\"));\nconst ForgetPassword = React.lazy(() =>\n  import(\"./pages/account/ForgetPassword\")\n);\nconst Register = React.lazy(() => import(\"./pages/account/Register\"));\nconst ConfirmAccount = React.lazy(() => import(\"./pages/account/Confirm\"));\n\n// main\nconst AuthLayout = React.lazy(() => import(\"./components/AuthLayout\"));\nconst StringsPage = React.lazy(() => import(\"./pages/main/StringsPage\"));\nconst CreateStringPage = React.lazy(() =>\n  import(\"./pages/main/CreateStringPage\")\n);\n\n// handle auth and authorization\n\nconst PrivateRoute = ({ component: Component, roles, ...rest }) => (\n  <Route\n    {...rest}\n    render={(props) => {\n      const isAuthTokenValid = isUserAuthenticated();\n      if (!isAuthTokenValid) {\n        // not logged in so redirect to login page with the return url\n        return <Redirect to={{ pathname: \"/\" }} />;\n      }\n\n      const loggedInUser = getLoggedInUser();\n      // check if route is restricted by role\n      if (roles && roles.indexOf(loggedInUser.role) === -1) {\n        // role not authorised so redirect to home page\n        return (\n          <Redirect\n            to={{ pathname: \"/login\", state: { from: props.location } }}\n          />\n        );\n      }\n\n      // authorised so return component\n      return <Component {...props} />;\n    }}\n  />\n);\n\nconst routes = [\n  // auth and account\n  { path: \"/\", name: \"AuthLayout\", component: AuthLayout, route: Route },\n  { path: \"/login\", name: \"Login\", component: Login, route: Route },\n  { path: \"/logout\", name: \"Logout\", component: Logout, route: Route },\n  {\n    path: \"/forget-password\",\n    name: \"Forget Password\",\n    component: ForgetPassword,\n    route: Route,\n  },\n  { path: \"/register\", name: \"Register\", component: Register, route: Route },\n  {\n    path: \"/confirm\",\n    name: \"Confirm\",\n    component: ConfirmAccount,\n    route: Route,\n  },\n\n  // other pages\n  {\n    path: \"/dashboard\",\n    name: \"Dashboard\",\n    component: Dashboard,\n    route: PrivateRoute,\n    roles: [\"Admin\"],\n    title: \"Dashboard\",\n  },\n  {\n    path: \"/\",\n    exact: true,\n    component: () => <Redirect to=\"/dashboard\" />,\n    route: PrivateRoute,\n  },\n];\n\nconst mainPageRoutes = [\n  {\n    path: \"/strings/create\",\n    name: \"CreateStringPage\",\n    component: CreateStringPage,\n    title: \"Создать строку\",\n    route: Route,\n  },\n  {\n    path: \"/strings\",\n    name: \"StringsPage\",\n    component: StringsPage,\n    title: \"Строки\",\n    route: Route,\n  },\n];\n\nexport { routes, mainPageRoutes, PrivateRoute };\n","import React, { Component, Suspense } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Loadable from \"react-loadable\";\n\nimport { routes } from \"./routes\";\n\n// setup fake backend\nimport { configureFakeBackend } from \"./helpers\";\nimport { isUserAuthenticated } from \"./helpers/authUtils\";\n\n// Themes\nimport \"./assets/scss/DefaultTheme.scss\";\n\n// Lazy loading and code splitting -\n// Derieved idea from https://blog.logrocket.com/lazy-loading-components-in-react-16-6-6cea535c0b52\nconst loading = () => <div></div>;\n\n// All layouts/containers\nconst NonAuthLayout = Loadable({\n  loader: () => import(\"./components/NonAuthLayout\"),\n  render(loaded, props) {\n    let Component = loaded.default;\n    return <Component {...props} />;\n  },\n  loading,\n});\n\nconst AuthLayout = Loadable({\n  loader: () => import(\"./components/AuthLayout\"),\n  render(loaded, props) {\n    let Component = loaded.default;\n    return <Component {...props} />;\n  },\n  loading,\n});\n\n// configure fake backend\nconfigureFakeBackend();\n\n/**\n * Exports the component with layout wrapped to it\n * @param {} WrappedComponent\n */\nconst withLayout = (WrappedComponent) => {\n  const HOC = class extends Component {\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  };\n\n  return connect()(HOC);\n};\n\n/**\n * Main app component\n */\nclass App extends Component {\n  /**\n   * Returns the layout component based on different properties\n   * @param {*} props\n   */\n  getLayout = () => {\n    return isUserAuthenticated() ? AuthLayout : NonAuthLayout;\n  };\n\n  render() {\n    return (\n      // rendering the router with layout\n      <BrowserRouter>\n        <React.Fragment>\n          {routes.map((route, index) => {\n            return (\n              <route.route\n                key={index}\n                path={route.path}\n                exact={route.exact}\n                roles={route.roles}\n                component={withLayout((props) => {\n                  const Layout = this.getLayout();\n                  return (\n                    <Suspense fallback={loading()}>\n                      <Layout {...props} title={route.title}>\n                        <route.component {...props} />\n                      </Layout>\n                    </Suspense>\n                  );\n                })}\n              />\n            );\n          })}\n        </React.Fragment>\n      </BrowserRouter>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuthenticated: state.Auth.isAuthenticated,\n  };\n};\n\nexport default connect(mapStateToProps, null)(App);\n","export function configureFakeBackend() {\n    let users = [{ id: 1, username: 'test', password: 'test', firstName: 'Test', lastName: 'User', role: 'Admin' }];\n    let realFetch = window.fetch;\n    window.fetch = function (url, opts) {\n        return new Promise((resolve, reject) => {\n            // wrap in timeout to simulate server api call\n            setTimeout(() => {\n\n                // authenticate\n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // find if any user matches login credentials\n                    let filteredUsers = users.filter(user => {\n                        return user.username === params.username && user.password === params.password;\n                    });\n\n                    if (filteredUsers.length) {\n                        // if login details are valid return user details and fake jwt token\n                        let user = filteredUsers[0];\n                        let responseJson = {\n                            id: user.id,\n                            username: user.username,\n                            firstName: user.firstName,\n                            lastName: user.lastName,\n                            role: \"Admin\",\n                            token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4'\n                        };\n                        resolve({ ok: true, json: () => responseJson });\n                    } else {\n                        // else return error\n                        reject('Username or password is incorrect');\n                    }\n                    return;\n                }\n\n                // register\n                if (url.endsWith('/users/register') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // add new users\n                    let { firstName, lastName } = params.fullname.split(\" \");\n                    let newUser = { id: users.length + 1, username: firstName, password: params.password, firstName: firstName, lastName: lastName, role: 'Admin' }\n                    users.push({ newUser })\n\n                    let responseJson = {\n                        id: newUser.id,\n                        username: newUser.username,\n                        firstName: newUser.firstName,\n                        lastName: newUser.lastName,\n                        role: newUser.role,\n                        token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4'\n                    };\n                    resolve({ ok: true, json: () => responseJson });\n                    return;\n                }\n\n                // forget password\n                if (url.endsWith('/users/password-reset') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // find if any user matches login credentials\n                    let filteredUsers = users.filter(user => {\n                        return user.username === params.username;\n                    });\n\n                    if (filteredUsers.length) {\n                        let responseJson = {\n                            message: \"We've sent you a link to reset password to your registered email.\"\n                        };\n                        resolve({ ok: true, json: () => responseJson });\n                    } else {\n                        // else return error\n                        reject('Sorry, we could not find any registered user with entered username');\n                    }\n                    return;\n                }\n\n                // get users\n                if (url.endsWith('/users') && opts.method === 'GET') {\n                    // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n                    if (opts.headers && opts.headers.Authorization === 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4') {\n                        resolve({ ok: true, json: () => users });\n                    } else {\n                        // return 401 not authorised if token is null or invalid\n                        reject('Unauthorised');\n                    }\n\n                    return;\n                }\n\n                // pass through any requests not handled above\n                realFetch(url, opts).then(response => resolve(response));\n\n            }, 500);\n        });\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// @flow\nimport {\n    LOGIN_USER,\n    LOGIN_USER_SUCCESS,\n    LOGIN_USER_FAILED,\n    LOGOUT_USER,\n    REGISTER_USER,\n    REGISTER_USER_SUCCESS,\n    REGISTER_USER_FAILED,\n    FORGET_PASSWORD,\n    FORGET_PASSWORD_SUCCESS,\n    FORGET_PASSWORD_FAILED\n} from '../../constants/actionTypes';\n\nimport { getLoggedInUser } from '../../helpers/authUtils';\n\nconst INIT_STATE = {\n    user: getLoggedInUser(),\n    loading: false\n};\n\ntype AuthAction = { type: string, payload: {} | string };\ntype State = { user?: {} | null, loading?: boolean, +value?: boolean };\n\nconst Auth = (state:State = INIT_STATE, action: AuthAction) => {\n    switch (action.type) {\n        case LOGIN_USER:\n            return { ...state, loading: true };\n        case LOGIN_USER_SUCCESS:\n            return { ...state, user: action.payload, loading: false, error: null };\n        case LOGIN_USER_FAILED:\n            return { ...state, error: action.payload, loading: false };\n        case REGISTER_USER:\n            return { ...state, loading: true };\n        case REGISTER_USER_SUCCESS:\n            return { ...state, user: action.payload, loading: false, error: null };\n        case REGISTER_USER_FAILED:\n            return { ...state, error: action.payload, loading: false };\n        case LOGOUT_USER:\n            return { ...state, user: null };\n        case FORGET_PASSWORD:\n            return { ...state, loading: true };\n        case FORGET_PASSWORD_SUCCESS:\n            return { ...state, passwordResetStatus: action.payload, loading: false, error: null };\n        case FORGET_PASSWORD_FAILED:\n            return { ...state, error: action.payload, loading: false };\n        default: return { ...state };\n    }\n}\n\nexport default Auth;","// @flow\nimport {\n  ADD_STRING,\n  ADD_STRING_SUCCESS,\n  ADD_STRING_FAILED,\n  UPDATE_STRING,\n  UPDATE_STRING_SUCCESS,\n  UPDATE_STRING_FAILED,\n  DELETE_STRING,\n  DELETE_STRING_SUCCESS,\n  DELETE_STRING_FAILED,\n} from \"../../constants/actionTypes\";\n\nconst INIT_STATE = {\n  existStrings: [\n    {\n      id: 23421,\n      identifier: \"mobile.profile.generalInfo\",\n      string: \"Базовая информация\",\n      hasTranslate: [\"ru\", \"en\", \"es\", \"ee\"],\n    },\n    {\n      id: 23422,\n      identifier: \"mobile.profile.generalInfo\",\n      string: \"Базовая информация\",\n      hasTranslate: [\"ru\", \"en\", \"es\", \"ee\"],\n    },\n    {\n      id: 23423,\n      identifier: \"mobile.profile.generalInfo\",\n      string: \"Базовая информация\",\n      hasTranslate: [\"ru\", \"en\", \"es\", \"ee\"],\n    },\n    {\n      id: 23424,\n      identifier: \"mobile.profile.generalInfo\",\n      string: \"Базовая информация\",\n      hasTranslate: [\"ru\", \"en\", \"es\", \"ee\"],\n    },\n    {\n      id: 23425,\n      identifier: \"mobile.profile.generalInfo\",\n      string: \"Базовая информация\",\n      hasTranslate: [\"ru\", \"en\", \"es\", \"ee\"],\n    },\n    {\n      id: 23426,\n      identifier: \"mobile.profile.generalInfo\",\n      string: \"Базовая информация\",\n      hasTranslate: [\"ru\", \"en\", \"es\", \"ee\"],\n    },\n    {\n      id: 23427,\n      identifier: \"mobile.profile.generalInfo\",\n      string: \"Базовая информация\",\n      hasTranslate: [\"ru\", \"en\", \"es\", \"ee\"],\n    },\n    {\n      id: 23428,\n      identifier: \"mobile.profile.generalInfo\",\n      string: \"Базовая информация\",\n      hasTranslate: [\"ru\", \"en\", \"es\", \"ee\"],\n    },\n    {\n      id: 23429,\n      identifier: \"mobile.profile.generalInfo\",\n      string: \"Базовая информация\",\n      hasTranslate: [\"ru\", \"en\", \"es\", \"ee\"],\n    },\n    {\n      id: 23430,\n      identifier: \"mobile.profile.generalInfo\",\n      string: \"Базовая информация\",\n      hasTranslate: [\"ru\", \"en\", \"es\", \"ee\"],\n    },\n    {\n      id: 23431,\n      identifier: \"mobile.profile.generalInfo\",\n      string: \"Базовая информация\",\n      hasTranslate: [\"ru\", \"en\", \"es\", \"ee\"],\n    },\n    {\n      id: 23432,\n      identifier: \"mobile.profile.generalInfo\",\n      string: \"Базовая информация\",\n      hasTranslate: [\"ru\", \"en\", \"es\", \"ee\"],\n    },\n    {\n      id: 23433,\n      identifier: \"mobile.profile.generalInfo\",\n      string: \"Базовая информация\",\n      hasTranslate: [\"ru\", \"en\", \"es\", \"ee\"],\n    },\n  ],\n  loading: false,\n  error: null,\n};\n\nconst stringsReducer = (state = INIT_STATE, { type, payload }) => {\n  switch (type) {\n    case ADD_STRING:\n      return { ...state, loading: true };\n    case ADD_STRING_SUCCESS:\n      return { ...state, existStrings: payload, loading: false, error: null };\n    case ADD_STRING_FAILED:\n      return { ...state, error: payload, loading: false };\n    case UPDATE_STRING:\n      return { ...state, loading: true };\n    case UPDATE_STRING_SUCCESS:\n      return { ...state, existStrings: payload, loading: false, error: null };\n    case UPDATE_STRING_FAILED:\n      return { ...state, error: payload, loading: false };\n    case DELETE_STRING:\n      return { ...state, user: null };\n    case DELETE_STRING_SUCCESS:\n      return { ...state, existStrings: payload, loading: false, error: null };\n    case DELETE_STRING_FAILED:\n      return { ...state, error: payload, loading: false };\n\n    default:\n      return { ...state };\n  }\n};\n\nexport default stringsReducer;\n","import { combineReducers } from \"redux\";\nimport Auth from \"./auth/reducers\";\nimport stringsReducer from \"./strings/stringsReducer\";\nimport title from \"./pageTitle\";\n\nexport default combineReducers({\n  Auth,\n  strings: stringsReducer,\n  title,\n});\n","// @flow\r\nimport { Cookies } from \"react-cookie\";\r\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\r\n\r\nimport {\r\n    LOGIN_USER,\r\n    LOGOUT_USER,\r\n    REGISTER_USER,\r\n    FORGET_PASSWORD\r\n} from '../../constants/actionTypes';\r\n\r\n\r\nimport {\r\n    loginUserSuccess,\r\n    loginUserFailed,\r\n    registerUserSuccess,\r\n    registerUserFailed,\r\n    forgetPasswordSuccess,\r\n    forgetPasswordFailed\r\n} from './actions';\r\n\r\n\r\n/**\r\n * Fetch data from given url\r\n * @param {*} url \r\n * @param {*} options \r\n */\r\nconst fetchJSON = (url, options = {}) => {\r\n    return fetch(url, options)\r\n        .then(response => {\r\n            if (!response.status === 200) {\r\n                throw response.json();\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            return json;\r\n        })\r\n        .catch(error => { throw error });\r\n}\r\n\r\n\r\n/**\r\n * Sets the session\r\n * @param {*} user \r\n */\r\nconst setSession = (user) => {\r\n    let cookies = new Cookies();\r\n    if (user)\r\n        cookies.set(\"user\", JSON.stringify(user), { path: \"/\" });\r\n    else\r\n        cookies.remove(\"user\");\r\n};\r\n/**\r\n * Login the user\r\n * @param {*} payload - username and password \r\n */\r\nfunction* login({ payload: { username, password } }) {\r\n    const options = {\r\n        body: JSON.stringify({ username, password }),\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' }\r\n    };\r\n\r\n    try {\r\n        const response = yield call(fetchJSON, '/users/authenticate', options);\r\n        setSession(response);\r\n        yield put(loginUserSuccess(response));\r\n    } catch (error) {\r\n        let message;\r\n        switch (error.status) {\r\n            case 500: message = 'Internal Server Error'; break;\r\n            case 401: message = 'Invalid credentials'; break;\r\n            default: message = error;\r\n        }\r\n        yield put(loginUserFailed(message));\r\n        setSession(null);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Logout the user\r\n * @param {*} param0 \r\n */\r\nfunction* logout({ payload: { history } }) {\r\n    try {\r\n        setSession(null);\r\n        yield call(() => {\r\n            history.push(\"/login\");\r\n        });\r\n    } catch (error) { }\r\n}\r\n\r\n/**\r\n * Register the user\r\n */\r\nfunction* register({ payload: { fullname, email, password } }) {\r\n    const options = {\r\n        body: JSON.stringify({ fullname, email, password }),\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' }\r\n    };\r\n\r\n    try {\r\n        const response = yield call(fetchJSON, '/users/register', options);\r\n        yield put(registerUserSuccess(response));\r\n    } catch (error) {\r\n        let message;\r\n        switch (error.status) {\r\n            case 500: message = 'Internal Server Error'; break;\r\n            case 401: message = 'Invalid credentials'; break;\r\n            default: message = error;\r\n        }\r\n        yield put(registerUserFailed(message));\r\n    }\r\n}\r\n\r\n/**\r\n * forget password\r\n */\r\nfunction* forgetPassword({ payload: { username } }) {\r\n    const options = {\r\n        body: JSON.stringify({ username }),\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' }\r\n    };\r\n\r\n    try {\r\n        const response = yield call(fetchJSON, '/users/password-reset', options);\r\n        yield put(forgetPasswordSuccess(response.message));\r\n    } catch (error) {\r\n        let message;\r\n        switch (error.status) {\r\n            case 500: message = 'Internal Server Error'; break;\r\n            case 401: message = 'Invalid credentials'; break;\r\n            default: message = error;\r\n        }\r\n        yield put(forgetPasswordFailed(message));\r\n    }\r\n}\r\n\r\n\r\nexport function* watchLoginUser():any {\r\n    yield takeEvery(LOGIN_USER, login);\r\n}\r\n\r\nexport function* watchLogoutUser():any {\r\n    yield takeEvery(LOGOUT_USER, logout);\r\n}\r\n\r\nexport function* watchRegisterUser():any {\r\n    yield takeEvery(REGISTER_USER, register);\r\n}\r\n\r\nexport function* watchForgetPassword():any {\r\n    yield takeEvery(FORGET_PASSWORD, forgetPassword);\r\n}\r\n\r\nfunction* authSaga():any {\r\n    yield all([\r\n        fork(watchLoginUser),\r\n        fork(watchLogoutUser),\r\n        fork(watchRegisterUser),\r\n        fork(watchForgetPassword),\r\n    ]);\r\n}\r\n\r\nexport default authSaga;","import { all } from 'redux-saga/effects';\nimport authSaga from './auth/saga';\n\n\nexport default function* rootSaga(getState) {\n    yield all([\n        authSaga(),\n    ]);\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from \"redux-saga\";\nimport reducers from './reducers';\nimport sagas from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\n\nexport function configureStore(initialState) {\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n    const store = createStore(\n        reducers,\n        initialState,\n        composeEnhancers(\n            applyMiddleware(...middlewares)\n        ),\n    );\n    sagaMiddleware.run(sagas);\n    return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { configureStore } from './redux/store';\n\n\nReactDOM.render(<Provider store={configureStore()}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}